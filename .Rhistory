# Definición del condicional
if (age >= 18) {
print("Adulto")
}
# Definición del condicional
age <- 25
if (age >= 18) {
print("Adulto")
}
# Definición del condicional
age <- 5
if (age >= 18) {
print("Adulto")
}
# Definición del condicional
age <- 5
if (age >= 18) {
print("Adulto")
}
if (age >= 18) {
print("Adulto")
}
# Definición del condicional
age <- 9
if (age >= 18) {
print("Adulto")
}
# Definición del condicional
age <- 9
if (age >= 18) {
print("Adulto")
}
# Definición del condicional
age <- 25
if (age >= 18) {
print("Adulto")
}
x <- 2
x <- 2
if (age > 5) {
print("x es mayor que 5")
} else {
print("x es menor o igual que 5")
}
x <- 2
if (x > 5) {
print("x es mayor que 5")
} else {
print("x es menor o igual que 5")
}
# Definición de una función
f_z = function(x){
z <- (x - mean(x))/sd(x)
return(z)
}
x <- 1:20
z <- f_z(x)
z
mean(z)
sd(z)
# Definición de la función a partir de un condicional
par_impar <- function(x){
if(x %% 2 == 0){
return("par")
} else {
return("impar")
}
}
par_impar(2)
par_impar(3)
par_impar(4)
par_impar(6)
par_impar(1000)
par_impar(2500)
# Definición de la función a partir de un condicional
par_impar <- function(x){
if(x %% 2 == 0){
return("El número es par")
} else {
return("El número es impar")
}
}
par_impar(2500)
par_impar(3)
install.packages("swirl")
library(swirl)
swirl()
#----------------------#
# Cargar base de datos #-------------------------------------------------------------------------------------------------------------------------
#----------------------#
setwd("C:/Users/PC/Desktop/Nuevo_Curso_2024I")
#----------------------#
# Cargar base de datos #-------------------------------------------------------------------------------------------------------------------------
#----------------------#
setwd("C:/Users/PC/Desktop/Curso_EDA_2024I")
dataset <- readxl::read_excel("Input/attend.xlsx")
#----------------------#
# Cargar base de datos #-------------------------------------------------------------------------------------------------------------------------
#----------------------#
setwd("C:/Users/Portatil/Desktop/Curso_EDA_2024I")
dataset <- readxl::read_excel("Input/attend.xlsx")
#----------------------#
# Cargar base de datos #-------------------------------------------------------------------------------------------------------------------------
#----------------------#
setwd("C:/Users/Portatil/Desktop/Curso_EDA_2024_I")
dataset <- readxl::read_excel("Input/attend.xlsx")
library(wooldridge)
writexl::write_xlsx(attend, "Datos/attend.xlsx")
dataset <- readxl::read_excel("Datos/attend.xlsx")
#-------------------------------------------#
# Variables categóricas: diagrama de barras #
#-------------------------------------------#
# Para examinar la distribución de una variable categórica, nos interesa su frecuencia
new_dataset <- dataset %>% mutate(Int_attend = cut(attend,
breaks = seq(0,50, by = 10),
right = F,
labels = c("Group 1",
"Group 2",
"Group 3",
"Group 4",
"Group 5"))) # Asignar etiquetas
library(tidyverse)
#-------------------------------------------#
# Variables categóricas: diagrama de barras #
#-------------------------------------------#
# Para examinar la distribución de una variable categórica, nos interesa su frecuencia
new_dataset <- dataset %>% mutate(Int_attend = cut(attend,
breaks = seq(0,50, by = 10),
right = F,
labels = c("Group 1",
"Group 2",
"Group 3",
"Group 4",
"Group 5"))) # Asignar etiquetas
# Definir variables categóricas
new_dataset$Int_attend = as.factor(new_dataset$Int_attend)
new_dataset$soph = as.factor(new_dataset$soph)
new_dataset$frosh = as.factor(new_dataset$frosh)
# Graficar proporción y conteo
count.plot = ggplot(data = new_dataset) +
geom_bar(mapping = aes(x = Int_attend),
color = "white", fill = "lightskyblue") +
labs(title = "Intervalos para los puntajes de la prueba",
x = "Puntajes", y = "Conteo (n)") + theme_bw()
share.plot = ggplot(data = new_dataset) +
geom_bar(mapping = aes(x = Int_attend,
y =after_stat(count / sum(count))),
color = "white", fill = "coral") +
labs(title = "Intervalos para los puntajes de la prueba",
x = "Puntajes", y = "Proporción (%)") +  scale_y_continuous(labels = scales::percent) +
theme_bw()
ggarrange(count.plot, share.plot, ncol = 2, nrow = 1)
library(ggpubr)
library(gt)
library(treemapify)
ggarrange(count.plot, share.plot, ncol = 2, nrow = 1)
# La misma información se puede obtener con la función dplyr::count()
count_attend = new_dataset %>% count(Int_attend) %>%
mutate(perc = prop.table(n)*100)
# Un resumen de las variables categóricas se puede obtener así
count_prop = new_dataset %>% select(c("Int_attend",
"soph", "frosh")) %>%
mutate(across(.fns = as.character)) %>%
tidyr::pivot_longer(cols = everything()) %>%
count(name, value, name = 'N') %>%
group_by(name) %>%
mutate(N = N,
Share = prop.table(N) * 100)
# Mejorar la presentación de los resultados
descriptive_summary = gt(as.data.frame(count_prop[c("value", "N", "Share")]))
gt_tbl <-
descriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
escriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl <-
descriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
# Donut chart
h_size = 5
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
# Treemap
ggplot(count_attend, aes(area = n,
fill = n, label = Int_attend)) +
geom_treemap() +
geom_treemap_text(colour = "white",
place = "centre",
size = 15) + scale_fill_viridis_c()
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend),
binwidth = 0.8)
# Manualmente, los datos del histograma se calculan con cut_width
new_dataset %>% count(cut_width(attend, 0.8))
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend),
binwidth = 0.8)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, fill = attend),
binwidth = 0.8)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
binwidth = 0.8)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "green", col = "green",
binwidth = 0.8)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "green", col = "black",
binwidth = 0.8)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "lightskyblue", col = "black",
binwidth = 0.8)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "lightskyblue", col = "black",
binwidth = 0.2)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "lightskyblue", col = "black",
binwidth = 0.9)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "lightskyblue", col = "black",
binwidth = 1)
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "lightskyblue", col = "black",
binwidth = 2)
# Un histograma puede dar algunas luces
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(attend),
binwidth = 0.8) + theme_classic()
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "lightskyblue", col = "black",
binwidth = 2) + theme_classic()
# Para examinar una variable continua, usamos histogramas
ggplot(data = new_dataset) +
geom_histogram(mapping = aes(x = attend, col = attend),
fill = "lightskyblue", col = "black",
binwidth = 2) + theme_bw()
# Manualmente, los datos del histograma se calculan con cut_width
new_dataset %>% count(cut_width(attend, 0.8))
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8))
count
count_prop
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8)) %>% gt
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8)) %>% gt()
count
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8))
count
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8)) %>% arrange(1) %>% gt()
count
count
%>% arrange(1) %>% gt()
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8)) %>%
arrange(1) %>% gt()
count
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
names = c("x", "y")) %>%
arrange("x") %>% gt()
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = c("x", "y")) %>%
arrange("x") %>% gt()
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "y") %>%
arrange("x") %>% gt()
count
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n") %>%
arrange("x") %>% gt()
count = gt(count[order(1),])
count = gt(count[,order(1)])
count = gt(count)
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n")
count = gt(count)
count
colnames(count) = c("cut", "n")
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n")
count = gt(count[order(n),])
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n") %>% arrange(n) %>% gt()
count
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n") %>% arrange(n) %>% gt()
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n") %>% arrange(n, T) %>% gt()
count
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n") %>% arrange(n, F) %>% gt()
count
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n") %>% arrange(desc(n)) %>% gt()
count
colnames(count) = c("Interval", "n")
count
count
colnames(count) = c("Interval", "n")
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n") %>% arrange(desc(n))
colnames(count) = c("Interval", "n")
count = gt(count)
count
count = count %>% t() %>% gt()
count
# Manualmente, los datos del histograma se calculan con cut_width
count = new_dataset %>% count(cut_width(attend, 0.8),
name = "n") %>% arrange(desc(n))
colnames(count) = c("Interval", "n")
count = count %>% t() %>% gt()
