outliers1 <- dataset %>% filter(ingreso<(Q1 - 1.5*IQR) | ingreso>(Q3 + 1.5*IQR))
# Comparación
length(outliers1$ingreso)
length(boxplot.stats(dataset$ingreso)$out)
# Identificación de los outliers en la gráfica
plot(dataset$ingreso, type='p',
col=ifelse(dataset$ingreso %in% outliers1$ingreso, "red", "black"),
pch = ifelse(dataset$ingreso %in% outliers1$ingreso, 17, 1),
ylim = c(-5000000, 10000000),
ylab  = "Ingreso laboral")
# Definición de función para estandarizar
f_z <- function(x){
z <- (x-mean(x, na.rm = T))/sd(x, na.rm = T)
return(z)
}
# Definición del data frame con la variable estandarizada
z <- data.frame(id = seq(1, nrow(dataset), by = 1),
x = dataset$ingreso,
z = f_z(dataset$ingreso))
# Seguimos el criterio según el cual z > 4, en muestras grandes,
# es considerado un valor atípico
outliers1 <- z  %>% filter(abs(z) > 2.5)
outliers2 <- z  %>% filter(abs(z) > 4)
par(mfrow = c(1,2))
plot(dataset$ingreso, type='p',
col=ifelse(dataset$ingreso %in% outliers1$x, "red", "black"),
pch = ifelse(dataset$ingreso %in% outliers1$x, 17, 1))
abline(h = min(outliers1$x), col="blue", lwd=3, lty=2)
plot(dataset$ingreso, type='p',
col=ifelse(dataset$ingreso %in% outliers2$x, "red", "black"),
pch = ifelse(dataset$ingreso %in% outliers2$x, 17, 1))
abline(h = min(outliers2$x), col="blue", lwd=3, lty=2)
# Definición del data frame con la variable estandarizada
z <- data.frame(x = dataset$ingreso,
z = f_z(dataset$ingreso))
# Seguimos el criterio según el cual z > 4, en muestras grandes,
# es considerado un valor atípico
outliers2 <- z  %>% filter(abs(z) > 4)
# Eliminar valores NA
# El tratamiento de los valores NA y su estudio
# corresponden al tercer módulo del curso
dataset <- dataset %>% filter(!is.na(ingreso))
# Creación de base de datos sin outliers
dataset_no <- dataset %>% filter(!ingreso %in% outliers2$x)
par(mfrow = c(1,2))
StatDA::edaplot(dataset$ingreso/1000, scatter=TRUE, H.freq=FALSE, box=TRUE,
H.breaks=seq(0,90000, by = 400),
H.col="lightgray", H.border=TRUE, H.labels=FALSE,
S.pch=1, S.col="blue", S.cex=0.5,
D.lwd=2, D.lty=1, D.plot=FALSE,
P.xlim=c(1, 20000), P.cex.lab =1.2,
P.log=FALSE, P.main="Histogram,
Density Plot, Scatterplot,
and Boxplot of Rate (outliers)",
P.xlab="Ingreso laboral (miles $)", P.plot=TRUE,
P.ylab="Density",
B.pch=1,B.cex=0.5, B.col="red")
lines(density(dataset$ingreso/1000), lwd=2, col='blue')
curve(dnorm(x, mean=mean(dataset$ingreso/1000, na.rm = T),
sd=sd(dataset$ingreso/1000, na.rm = T)), from=0, to=90000, add=T,
col='red', lwd=3)
leg.txt <- c(paste0("Min. = ", round(min(dataset$ingreso/1000),4)),
paste0("Max. = ", round(max(dataset$ingreso/1000),4)),
paste0("Mean = ", round(mean(dataset$ingreso/1000),4)),
paste0("Median = ", round(median(dataset$ingreso/1000),4)),
paste0("Std. dev. = ", round(sd(dataset$ingreso/1000),4)),
paste0("Kurtosis = ", round(kurtosis(dataset$ingreso/1000),4)),
paste0("Skewness = ", round(skewness(dataset$ingreso/1000),4)))
legend (x= 8000, y=0.0008, bty="n", leg.txt)
StatDA::edaplot(dataset_no$ingreso/1000, scatter=TRUE, H.freq=FALSE, box=TRUE,
H.breaks=seq(0,90000, by = 400),
H.col="lightgray", H.border=TRUE, H.labels=FALSE,
S.pch=1, S.col="blue", S.cex=0.5,
D.lwd=2, D.lty=1, D.plot=FALSE,
P.xlim=c(1, 20000), P.cex.lab =1.2,
P.log=FALSE, P.main="Histogram,
Density Plot, Scatterplot,
and Boxplot of Rate (no-outliers)",
P.xlab="Ingreso laboral (miles $)", P.plot=TRUE,
P.ylab="Density",
B.pch=1,B.cex=0.5, B.col="red")
lines(density(dataset_no$ingreso/1000), lwd=2, col='blue')
curve(dnorm(x, mean=mean(dataset_no$ingreso/1000, na.rm = T),
sd=sd(dataset_no$ingreso/1000, na.rm = T)), from=0, to=90000, add=T,
col='red', lwd=3)
leg.txt <- c(paste0("Min. = ", round(min(dataset_no$ingreso/1000),4)),
paste0("Max. = ", round(max(dataset_no$ingreso/1000),4)),
paste0("Mean = ", round(mean(dataset_no$ingreso/1000),4)),
paste0("Median = ", round(median(dataset_no$ingreso/1000),4)),
paste0("Std. dev. = ", round(sd(dataset_no$ingreso/1000),4)),
paste0("Kurtosis = ", round(kurtosis(dataset_no$ingreso/1000),4)),
paste0("Skewness = ", round(skewness(dataset_no$ingreso/1000),4)))
legend (x=8000, y=0.0008, bty="n", leg.txt)
# Outliers para log(x)
z <- data.frame(x = log(dataset$ingreso),
z = f_z(log(dataset$ingreso)))
# Seguimos el criterio según el cual z > 4, en muestras grandes,
# es considerado un valor atípico
outliers3 <- z  %>% filter(abs(z) > 4)
plot(log(dataset$ingreso), type='p',
col=ifelse(log(dataset$ingreso) %in% outliers3$x, "red", "black"),
pch = ifelse(log(dataset$ingreso) %in% outliers3$x, 17, 1))
abline(h = min(outliers3$x), col="blue", lwd=3, lty=2)
# Considérese la transformación logarítmica
dataset$log_ingreso <- log(dataset$ingreso)
dataset_no <- dataset %>% filter(!log_ingreso %in% outliers3$x)
# Nos centramos en las personas que cotizan
dataset_2 <- dataset %>% filter(ingreso > 2000000 &
ingreso < 10000000 &
cotiza_fondo != "No cotiza")
ggplot2::ggplot(dataset_2, aes(x = edad,
y = ingreso,
color = cotiza_fondo))+
geom_point()
ggplot2::ggplot(dataset_2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones"
)
# Conservar los n=11 categorías más frecuentes
dataset$actividad = fct_lump_n(dataset$actividad,
n = 11, other_level = "Other")
actividad <- dataset %>% dplyr::count(actividad) %>%
mutate(perc = prop.table(n)*100) %>% mutate(variable = "actividad")
colnames(actividad) = c("categories", "n", "perc", "variable")
actividad <- actividad %>% filter(categories != "Other")
figure_1 <- ggplot(actividad, aes(reorder(categories, -n), perc,
fill = categories, col = categories)) +
geom_bar(stat = "identity")
# Consideremos la cotización, la afliación a ARL y la caja de compensación
# Primero, examinamos la cotización a fondo de pensiones
cotiza <- dataset %>% dplyr::count(cotiza_fondo) %>%
mutate(perc = prop.table(n)*100) %>% mutate(variable = "cotiza_fondo")
colnames(cotiza) = c("categories", "n", "perc", "variable")
figure_5 <- ggplot(cotiza, aes(x = " ", n,
fill = categories)) +
geom_bar(stat = "identity", width = 1) + coord_polar("y", start=0) +
labs(title = " ",
x = "Categorías", y = " ") +
scale_x_discrete(label = function(x) stringr::str_trunc(x, 15)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
geom_label(aes(label = paste0(categories, ": ",round(perc,2), "%")),
position = position_stack(vjust = 0.5),
angle = 0,
show.legend = FALSE) + guides(fill="none",
col = "none") + theme_void()
figure_5
#######
####### De igual forma, se puede construir un panel
arl <- dataset %>% dplyr::count(arl) %>%
mutate(perc = prop.table(n)*100) %>% mutate(variable = "arl")
colnames(arl) = c("categories", "n", "perc", "variable")
caja <- dataset %>% dplyr::count(caja) %>%
mutate(perc = prop.table(n)*100) %>% mutate(variable = "caja")
colnames(caja) = c("categories", "n", "perc", "variable")
plot_dic <- rbind(cotiza, arl, caja)
figure_7 <- ggplot(plot_dic, aes(x = " ", n,
fill = categories)) +
geom_bar(stat = "identity", width = 1) + coord_polar("y", start=0) +
facet_wrap(~variable, scales="free", ncol = 3,
labeller = labeller(variable = c(`cotiza_fondo` = "Cotización fondo",
`arl` = "Afiliación a ARL",
`caja` = "Afiliación a caja de compensación"))) +
labs(title = " ",
x = "Categorías", y = " ") +
scale_x_discrete(label = function(x) stringr::str_trunc(x, 15)) +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
geom_label(aes(label = paste0(categories, ": ",round(perc,2), "%")),
position = position_stack(vjust = 0.42),
show.legend = FALSE) + guides(fill="none",
col = "none") + theme_void()
figure_7
# Pie chart
ggplot(cotiza_fondo, aes(x="", y=n, fill=categories)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_label(aes(label = round(perc,2)),
position = position_stack(vjust = 1),
show.legend = FALSE)
# Pie chart
ggplot(cotiza, aes(x="", y=n, fill=categories)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_label(aes(label = round(perc,2)),
position = position_stack(vjust = 1),
show.legend = FALSE)
# Donut chart
h_size = 5
ggplot(cotiza_fondo, aes(x = h_size, y = n, fill = categories)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(2, h_size + 0.5)) + theme_void()+
geom_label(aes(label = paste0(round(perc,1), "%")),
position = position_stack(vjust = 0.8),
show.legend = FALSE,
angle = 45)
ggplot(cotiza, aes(x = h_size, y = n, fill = categories)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(2, h_size + 0.5)) + theme_void()+
geom_label(aes(label = paste0(round(perc,1), "%")),
position = position_stack(vjust = 0.8),
show.legend = FALSE,
angle = 45)
ggplot(edu, aes(area = n,
fill = n, label = categories)) +
geom_treemap() +
geom_treemap_text(colour = "white",
place = "centre",
size = 15) + scale_fill_viridis_c()
# Treemap
library(treemapify)
ggplot(edu, aes(area = n,
fill = n, label = categories)) +
geom_treemap() +
geom_treemap_text(colour = "white",
place = "centre",
size = 15) + scale_fill_viridis_c()
########## Creamos un histograma
ggplot(data = dataset) +
geom_histogram(mapping = aes(x = ingreso/1000, col = ingreso),
fill = "lightskyblue", col = "black",
binwidth = 400) + xlim(c(0, 15000))  + theme_bw()
# Los datos del histograma pueden ser representados
# mediante la siguiente tabla
count = dataset %>% dplyr::count(cut_width(ingreso/1000, 1000, boundary = 0, dig.lab = 6),
name = "n")
########## La función de densidad empírica es obtenida usando
########## la función density()
ggplot(data = dataset, aes(x = ingreso/1000)) +
geom_density(color = "black",
alpha = 0.2, fill = "gray45") +
theme_bw() + labs(x = "Ingreso laboral", y = "Density",
title = "Ingreso laboral (miles $)") +
xlim(0, 8000)
########## La función de densidad empírica es obtenida usando
########## la función density()
ggplot(data = dataset, aes(x = ingreso/1000)) +
geom_density(color = "black",
alpha = 0.2, fill = "gray45") +
theme_bw() + xlim(0, 8000)
# La función de distribución acumulada empírica puede ser
# obtenida mediante la función ECDF
ggplot(data = dataset,
aes(x = ingreso/1000)) + stat_ecdf(geom = "step",
color = "gray45") +
theme_bw()  +
xlim(0,8000)
# La función de distribución acumulada empírica puede ser
# obtenida mediante la función ECDF
ggplot(data = dataset,
aes(x = ingreso/1000)) + stat_ecdf(geom = "step",
color = "gray45") +
theme_bw() + xlim(0,8000)
########## Construcción del diagrama de caja
# Crear boxplot
ggplot(dataset, aes(x = "", y = edad)) +
geom_boxplot()
# Ajustar parámetros
ggplot(dataset, aes(x = "", y = edad)) +
stat_boxplot(geom ='errorbar', col = "black")+
geom_boxplot(outliers = T, col = "black",
fill = "white") + theme_classic() + ylim(c(0,35)) + coord_flip()
library(StatDA)
library(moments)
me = mean(dataset$edad)
sd = sd(dataset$edad)
StatDA::edaplot(dataset$edad, scatter=TRUE, H.freq=FALSE, box=TRUE,
H.breaks=seq(0,100, by = 4),
H.col="lightgray", H.border=TRUE, H.labels=FALSE,
S.pch=1, S.col="blue", S.cex=0.5,
D.lwd=2, D.lty=1, D.plot=FALSE,
P.xlim=c(1, 91), P.cex.lab =1.2,
P.log=FALSE, P.main="Histogram,
Density Plot, Scatterplot,
and Boxplot of Age",
P.xlab="Edad (años)", P.plot=TRUE,
P.ylab="Density",
B.pch=1,B.cex=0.5, B.col="red")
lines(density(dataset$edad), lwd=2, col='blue')
curve(dnorm(x, mean=me, sd=sd), from=0, to=100, add=T,
col='red', lwd=3)
leg.txt <- c(paste0("Min. = ", round(min(dataset$edad),4)),
paste0("Max. = ", round(max(dataset$edad),4)),
paste0("Mean = ", round(mean(dataset$edad),4)),
paste0("Median = ", round(median(dataset$edad),4)),
paste0("Std. dev. = ", round(sd(dataset$edad),4)),
paste0("Kurtosis = ", round(kurtosis(dataset$edad),4)),
paste0("Skewness = ", round(skewness(dataset$edad),4)))
legend (x=-3, y=0.028, bty="n", leg.txt)
library(StatDA)
library(moments)
me = mean(dataset$edad)
sd = sd(dataset$edad)
StatDA::edaplot(dataset$edad, scatter=TRUE, H.freq=FALSE, box=TRUE,
H.breaks=seq(0,100, by = 4),
H.col="lightgray", H.border=TRUE, H.labels=FALSE,
S.pch=1, S.col="blue", S.cex=0.5,
D.lwd=2, D.lty=1, D.plot=FALSE,
P.xlim=c(1, 91), P.cex.lab =1.2,
P.log=FALSE, P.main="Histogram,
Density Plot, Scatterplot,
and Boxplot of Age",
P.xlab="Edad (años)", P.plot=TRUE,
P.ylab="Density",
B.pch=1,B.cex=0.5, B.col="red")
lines(density(dataset$edad), lwd=2, col='blue')
curve(dnorm(x, mean=me, sd=sd), from=0, to=100, add=T,
col='red', lwd=3)
leg.txt <- c(paste0("Min. = ", round(min(dataset$edad),4)),
paste0("Max. = ", round(max(dataset$edad),4)),
paste0("Mean = ", round(mean(dataset$edad),4)),
paste0("Median = ", round(median(dataset$edad),4)),
paste0("Std. dev. = ", round(sd(dataset$edad),4)),
paste0("Kurtosis = ", round(kurtosis(dataset$edad),4)),
paste0("Skewness = ", round(skewness(dataset$edad),4)))
legend (x=-3, y=0.028, bty="n", leg.txt)
library(StatDA)
library(moments)
me = mean(dataset$edad)
sd = sd(dataset$edad)
StatDA::edaplot(dataset$edad, scatter=TRUE, H.freq=FALSE, box=TRUE,
H.breaks=seq(0,100, by = 4),
H.col="lightgray", H.border=TRUE, H.labels=FALSE,
S.pch=1, S.col="blue", S.cex=0.5,
D.lwd=2, D.lty=1, D.plot=FALSE,
P.xlim=c(1, 91), P.cex.lab =1.2,
P.log=FALSE, P.main="Histogram,
Density Plot, Scatterplot,
and Boxplot of Age",
P.xlab="Edad (años)", P.plot=TRUE,
P.ylab="Density",
B.pch=1,B.cex=0.5, B.col="red")
lines(density(dataset$edad), lwd=2, col='blue')
curve(dnorm(x, mean=me, sd=sd), from=0, to=100, add=T,
col='red', lwd=3)
leg.txt <- c(paste0("Min. = ", round(min(dataset$edad),4)),
paste0("Max. = ", round(max(dataset$edad),4)),
paste0("Mean = ", round(mean(dataset$edad),4)),
paste0("Median = ", round(median(dataset$edad),4)),
paste0("Std. dev. = ", round(sd(dataset$edad),4)),
paste0("Kurtosis = ", round(kurtosis(dataset$edad),4)),
paste0("Skewness = ", round(skewness(dataset$edad),4)))
legend (x=-3, y=0.028, bty="n", leg.txt)
edu_area <- dataset %>% count(edu, area) %>%
group_by(area) %>% mutate(perc = (n/sum(n))*100)
ggplot(edu_area,
aes(x = fct_reorder(factor(edu), -perc),
y= perc, fill = factor(edu))) +
geom_bar(stat = "identity") + facet_wrap(~area) +
labs(x = "Nivel de educación máxima", y = "Proporción (%)") +
ggtitle("Nivel de educación según área metropolitana") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank()) +
facet_wrap(~area, ncol = 5)
ggplot(edu_area,
aes(x = fct_reorder(factor(edu), -perc),
y= perc, fill = factor(edu))) +
geom_bar(stat = "identity") + facet_wrap(~area, ncol = 5) +
theme_bw() + theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank()) +
labs(x = "Nivel de educación máxima", y = "Proporción (%)") +
ggtitle("Nivel de educación según área metropolitana") +
# Examinar la tabla de contigencia
con1<-table(dataset$area,dataset$edu)
ggplot(edu_area,
aes(x = fct_reorder(factor(edu), -perc),
y= perc, fill = factor(edu))) +
geom_bar(stat = "identity") + facet_wrap(~area, ncol = 5) +
theme_bw() + theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank()) +
labs(x = "Nivel de educación máxima", y = "Proporción (%)") +
ggtitle("Nivel de educación según área metropolitana") +
# Examinar la tabla de contigencia
con1<-table(dataset$area,dataset$edu)
ggplot(edu_area,
aes(x = fct_reorder(factor(edu), -perc),
y= perc, fill = factor(edu))) +
geom_bar(stat = "identity") + facet_wrap(~area, ncol = 5) +
theme_bw() + theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank()) +
labs(x = "Nivel de educación máxima", y = "Proporción (%)") +
ggtitle("Nivel de educación según área metropolitana")
# Examinar la tabla de contigencia
con1<-table(dataset$area,dataset$edu)
addmargins(con1)
mosaicplot(con1, las = 2, shade = T)
chisq.test(dataset$area, dataset$edu, simulate.p.value = T)
dataset$medio = fct_lump_n(factor(dataset$medio), 7)
sexo_medio <- dataset %>% dplyr::count(sexo, medio) %>%
group_by(sexo) %>% mutate(perc = (n/sum(n))*100)
p.value <- chisq.test(dataset$sexo, dataset$medio)$p.value
ggplot(sexo_medio, aes(x = sexo, y = perc,
fill = fct_reorder(medio, perc)) ) +
geom_bar(stat = "identity", position = "dodge") +
annotate("text", x=1, y=30, label=paste0("Chi-2 test, p-value: ", signif(p.value,4))) +
theme_bw() + scale_fill_brewer(palette = "PuOr") +
labs(x = "Sexo", y = "Participación (%)",
fill = "Medio")
ggplot(sexo_medio, aes(x = sexo, y = perc,
fill = fct_reorder(medio, perc)) ) +
geom_bar(stat = "identity", position = "dodge") +
annotate("text", x=1.5, y=30, label=paste0("Chi-2 test, p-value: ", signif(p.value,4))) +
theme_bw() + scale_fill_brewer(palette = "PuOr") +
labs(x = "Sexo", y = "Participación (%)",
fill = "Medio")
library(ggpubr)
dataset$ingreso2 = dataset$ingreso/1000
dataset$edu = fct_lump_n(dataset$edu, 6)
# Ingreso laboral según el nivel educativo
ggboxplot(dataset, x = "edu", y = "ingreso2",
color = "edu", palette = "jco",
outlier.shape = NA)+
stat_compare_means() + ylim(c(0, 6000)) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank()) +
labs(title = "Ingreso laboral (miles $) según el nivel educativo",
y = "Ingreso (miles $)", x = "",
color = "Nivel")
# Ingreso laboral según el nivel educativo
ggboxplot(dataset, x = "edu", y = "ingreso2",
color = "edu", palette = "jco",
outlier.shape = NA)+
stat_compare_means()
# Añadir la comparación por pares
comparisons <- list( c("Secundaria", "Universitaria"),
c("Secundaria", "Maestría"),
c("Primaria", "Secundaria") )
ggboxplot(dataset, x = "edu", y = "ingreso2",
color = "edu", palette = "jco",
outlier.shape = NA) +
stat_compare_means(comparisons = comparisons,
label.y = c(11000, 10000, 12000),
bracket.size = 0.2,
label =  "p.signif") +
stat_compare_means(label.y = 18000, label.x = 2)  +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank()) +
labs(title = "Ingreso laboral (miles $) según el nivel educativo",
y = "Ingreso (miles $)", x = "",
color = "Nivel") + ylim(0,20000)
# La aproximación básica es un scatter plot:
ggplot(data = dataset) +
geom_point(mapping = aes(x = edad,
y = ingreso/1000,
col = sexo)) +
scale_color_manual(values = RColorBrewer::brewer.pal(4,"Blues")[3:4])
# El parámetro de transparencia (alpha) puede ser usado para
# el caso de grandes bases de datos
ggplot(data = dataset) +
geom_point(mapping = aes(x = edad,
y = t_actual),
alpha = 0.2)
library(hexbin)
ggplot(data = dataset,
mapping = aes(x = edad,
y = t_actual)) +
geom_boxplot(aes(group = cut_width(edad,
10)))
# Es posible determinar el ajuste mediante la función geom_smooth
ggplot(data = dataset, aes(x = edad, y = t_actual)) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
labs(title = "Edad (años cumplidos) y tiempo en el trabajo actual",
x = "Edad (en años)",
y = "Tiempo en el trabajo actual")
ggplot(data = dataset, aes(x = edad, y = t_actual)) +
geom_point(aes(color = factor(sexo))) +
geom_smooth(method = "lm",
se = FALSE,
aes(color = factor(sexo)))  +
labs(title = "Edad (años cumplidos) y tiempo en el trabajo actual",
x = "Edad (en años)",
y = "Tiempo en el trabajo actual")
# Lo mismo se puede hacer para  estudiar el cambio del ajuste lineal según el grupo
ggplot(dataset, aes(edad, log(ingreso))) +
geom_point() +
geom_smooth(method = "lm",
se = TRUE) +
facet_wrap(~edu)
# Para las demás variables es  útil examinar un scatter plot conjunto
# Para eso es útil la siguiente función base
cont_ds <- dataset %>% select(ingreso, edad, horas_semana, t_actual)
pairs(cont_ds,
main = "Scatter Plot Matrix for Dataset",
col = RColorBrewer::brewer.pal(4,"Blues"))
# Matriz de correlación para múltiples variables
library(corrplot)
cor_ds <- cor(cont_ds,  use = "complete.obs")
(round(cor_ds,2))
# Visualizar la correlación
# como círculo
corrplot(cor_ds, method="circle")
# como digrama circular
corrplot(cor_ds, method="pie")
# según el color
corrplot(cor_ds, method="color")
