geom_density(adjust=1.5, alpha=.4) +
theme_classic() + theme(legend.position = c(0.2, 0.8),
legend.title=element_blank())
k = 2
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
df_2
colnames(df_2) = c(colnames(df_1)[1], "group")
head(df_2)
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
df = rbind(df_1, df_2)
plot_list[[k]] = ggplot(data=df, aes(x=attend, group=group, fill=group)) +
geom_density(adjust=1.5, alpha=.4) +
theme_classic() + theme(legend.position = c(0.2, 0.8),
legend.title=element_blank())
}
ggarrange(plot_list[[1]], plot_list[[2]], plot_list[[3]],
plot_list[[4]], plot_list[[5]], plot_list[[6]],
plot_list[[7]], plot_list[[8]], ncol = 4, nrow = 2)
df
colnames(df) = c("x", "group")
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
df = rbind(df_1, df_2)
colnames(df) = c("x", "group")
plot_list[[k]] = ggplot(data=df, aes(x=x, group=group, fill=group)) +
geom_density(adjust=1.5, alpha=.4) +
theme_classic() + theme(legend.position = c(0.2, 0.8),
legend.title=element_blank())
}
ggarrange(plot_list[[1]], plot_list[[2]], plot_list[[3]],
plot_list[[4]], plot_list[[5]], plot_list[[6]],
plot_list[[7]], plot_list[[8]], ncol = 4, nrow = 2)
df = rbind(df_1, df_2)
plot_list[[k]] = ggplot(data=df, aes(x= colnames(df)[1], group=group, fill=group)) +
geom_density(adjust=1.5, alpha=.4) +
theme_classic() + theme(legend.position = c(0.2, 0.8),
legend.title=element_blank())
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
df = rbind(df_1, df_2)
plot_list[[k]] = ggplot(data=df, aes(x= colnames(df)[1], group=group, fill=group)) +
geom_density(adjust=1.5, alpha=.4) +
theme_classic() + theme(legend.position = c(0.2, 0.8),
legend.title=element_blank())
}
ggarrange(plot_list[[1]], plot_list[[2]], plot_list[[3]],
plot_list[[4]], plot_list[[5]], plot_list[[6]],
plot_list[[7]], plot_list[[8]], ncol = 4, nrow = 2)
colnames(dataset_continuas[,k])
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
df = rbind(df_1, df_2)
colnames(df) = c("x", "group")
plot_list[[k]] = ggplot(data=df, aes(x=x, group=group, fill=group)) +
geom_density(adjust=1.5, alpha=.4) +
theme_classic() + theme(legend.position = c(0.2, 0.8),
legend.title=element_blank()) +
labs(x = colnames(dataset_continuas[,k]))
}
ggarrange(plot_list[[1]], plot_list[[2]], plot_list[[3]],
plot_list[[4]], plot_list[[5]], plot_list[[6]],
plot_list[[7]], plot_list[[8]], ncol = 4, nrow = 2)
z_dataset <-  new_dataset[c("attend",
"priGPA", "termGPA",
"ACT", "final",
"atndrte",
"hwrte", "stndfnl")]
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
df_1
df_2
outliers_df <- data.frame(variable = rownames(ad),
ad_test = round(ad, 4),
li_test = round(li,4),
pearson_test = round(pearson, 4),
sw_test = round(sw, 4),
sf_test = round(sf, 4))
outliers_df
outliers_df <- data.frame(variable = rownames(ad),
ad_test = round(ad, 4),
li_test = round(li,4),
pearson_test = round(pearson, 4),
sw_test = round(sw, 4),
sf_test = round(sf, 4))
no_outliers_df <- data.frame(variable = rownames(ad),
ad_test = round(ad, 4),
li_test = round(li,4),
pearson_test = round(pearson, 4),
sw_test = round(sw, 4),
sf_test = round(sf, 4))
outliers_df
head(df_1)
head(df_2)
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
head(df_1)
head(df_2)
outliers_df$variable[k] = names(df_1)[1]
outliers_df
outliers_df$ad_test[k] = ad.test(df_1[,1])
df_1[,1]
outliers_df$ad_test[k] = ad.test(as.numeric(df_1[,1]))
ad.test(df_1[,1])
ad.test(as.numeric(df_1[,1]))
as.numeric(df_1[,1])
outliers_df$ad_test[k] = ad.test(as.vector(df_1[,1]))
df_1[,1]
as.vector(df_1[,1])
h = as.vector(df_1[,1])
h = as.vector(df_1[,1])[[1]]
h
outliers_df$ad_test[k] = ad.test(as.vector(df_1[,1])[[1]])
ad.test(as.vector(df_1[,1])[[1]])
h =ad.test(as.vector(df_1[,1])[[1]])
h$p.value
outliers_df$variable[k] = names(df_1)[1]
outliers_df$ad_test[k] = ad.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df$li_test[k] = lillie.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df$pearson_test[k] = pearson.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df$sw_test[k] = shapiro.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df$sf_test[k] = sf.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df
outliers_df <- data.frame(variable = rownames(ad),
ad_test = round(ad, 4),
li_test = round(li,4),
pearson_test = round(pearson, 4),
sw_test = round(sw, 4),
sf_test = round(sf, 4))
no_outliers_df <- data.frame(variable = rownames(ad),
ad_test = round(ad, 4),
li_test = round(li,4),
pearson_test = round(pearson, 4),
sw_test = round(sw, 4),
sf_test = round(sf, 4))
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
outliers_df$variable[k] = names(df_1)[1]
outliers_df$ad_test[k] = ad.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df$li_test[k] = lillie.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df$pearson_test[k] = pearson.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df$sw_test[k] = shapiro.test(as.vector(df_1[,1])[[1]])$p.value
outliers_df$sf_test[k] = sf.test(as.vector(df_1[,1])[[1]])$p.value
no_outliers_df$variable[k] = names(df_1)[1]
no_outliers_df$ad_test[k] = ad.test(as.vector(df_2[,1])[[1]])$p.value
no_outliers_df$li_test[k] = lillie.test(as.vector(df_2[,1])[[1]])$p.value
no_outliers_df$pearson_test[k] = pearson.test(as.vector(df_2[,1])[[1]])$p.value
no_outliers_df$sw_test[k] = shapiro.test(as.vector(df_2[,1])[[1]])$p.value
no_outliers_df$sf_test[k] = sf.test(as.vector(df_2[,1])[[1]])$p.value
}
no_outliers_df
outliers
outliers_df
outliers_df <- data.frame(variable = rownames(ad),
ad_test = round(ad, 4),
li_test = round(li,4),
pearson_test = round(pearson, 4),
sw_test = round(sw, 4),
sf_test = round(sf, 4))
no_outliers_df <- data.frame(variable = rownames(ad),
ad_test = round(ad, 4),
li_test = round(li,4),
pearson_test = round(pearson, 4),
sw_test = round(sw, 4),
sf_test = round(sf, 4))
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
outliers_df$variable[k] = names(df_1)[1]
outliers_df$ad_test[k] = round(ad.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$li_test[k] = round(lillie.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$pearson_test[k] = round(pearson.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$sw_test[k] = round(shapiro.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$sf_test[k] = round(sf.test(as.vector(df_1[,1])[[1]])$p.value, 4)
no_outliers_df$variable[k] = names(df_1)[1]
no_outliers_df$ad_test[k] = round(ad.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$li_test[k] = round(lillie.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$pearson_test[k] = round(pearson.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$sw_test[k] = round(shapiro.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$sf_test[k] = round(sf.test(as.vector(df_2[,1])[[1]])$p.value, 4)
}
outliers_df
no_outliers_df
options(scipen = 9999)
no_outliers_df
outliers_df
t1 = gt(outliers_df)
t2 = gt(no_outliers_df)
t1
t2
descriptive_summary
gt_tbl <-
descriptive_summary |>
tab_col_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl
gt_tbl <-
descriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl
t1
t2
data <- data.frame(Name = c("Mary","Mary","Mary","Jane","Jane","Jane"),
Variables = c(letters[1:3],letters[1:3]),
Count = c(45, 76, 43, 23, 11, 46),
Percent = c(0.45, 0.56, 0.89, 0.65, 0.88, 0.91)) %>%
arrange(desc(Name), Variables)
data
# Helper to put the columns in the right order
cols_order <- unlist(lapply(c("a", "b", "c"), function(x) paste(x, c("Count", "Percent"), sep = "_")))
data_wide <- data %>%
pivot_wider(names_from = "Variables", values_from = c(Count, Percent), names_glue = "{Variables}_{.value}") %>%
# Reorder columns
select(all_of(c("Name", cols_order)))
data_wide
data_wide %>%
gt(data, rowname_col = "Name")
data_wide
data_wide %>%
gt(data, rowname_col = "Name") %>%
tab_spanner_delim(
delim = "_"
)
outliers_df <- data.frame(variable = rownames(ad),
outliers_adtest = round(ad, 4),
outliers_litest = round(li,4),
outliers_pearsontest = round(pearson, 4),
outliers_swtest = round(sw, 4),
outliers_sftest = round(sf, 4))
no_outliers_df <- data.frame(variable = rownames(ad),
no.outliers_adtest = round(ad, 4),
no.outliers_litest = round(li,4),
no.outliers_pearsontest = round(pearson, 4),
no.outliers_swtest = round(sw, 4),
no.outliers_sftest = round(sf, 4))
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
outliers_df$variable[k] = names(df_1)[1]
outliers_df$outliers_adtest[k] = round(ad.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$outliers_litest[k] = round(lillie.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$outliers_pearsontest[k] = round(pearson.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$outliers_swtest[k] = round(shapiro.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$outliers_sftest[k] = round(sf.test(as.vector(df_1[,1])[[1]])$p.value, 4)
no_outliers_df$variable[k] = names(df_1)[1]
no_outliers_df$no.outliers_adtest[k] = round(ad.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$no.outliers_litest[k] = round(lillie.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$no.outliers_pearsontest[k] = round(pearson.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$no.outliers_swtest[k] = round(shapiro.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$no.outliers_sftest[k] = round(sf.test(as.vector(df_2[,1])[[1]])$p.value, 4)
}
summary_out <- merge(outliers_df, no_outliers_df)
summary_out
data_wide %>%
gt(summary_out, rowname_col = "variable") %>%
tab_spanner_delim(
delim = "_"
)
data_wide
x = data_wide %>%
gt(summary_out, rowname_col = "variable") %>%
tab_spanner_delim(
delim = "_"
)
x
gt(summary_out, rowname_col = "variable") %>%
tab_spanner_delim(
delim = "_"
)
outliers_df <- data.frame(variable = rownames(ad),
outliers_ad = round(ad, 4),
outliers_lillie = round(li,4),
outliers_pearson = round(pearson, 4),
outliers_sw = round(sw, 4),
outliers_sf = round(sf, 4))
no_outliers_df <- data.frame(variable = rownames(ad),
no.outliers_ad = round(ad, 4),
no.outliers_lillie = round(li,4),
no.outliers_pearson = round(pearson, 4),
no.outliers_sw = round(sw, 4),
no.outliers_sf = round(sf, 4))
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
outliers_df$variable[k] = names(df_1)[1]
outliers_df$outliers_ad[k] = round(ad.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$outliers_lillie[k] = round(lillie.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$outliers_pearson[k] = round(pearson.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$outliers_sw[k] = round(shapiro.test(as.vector(df_1[,1])[[1]])$p.value, 4)
outliers_df$outliers_sf[k] = round(sf.test(as.vector(df_1[,1])[[1]])$p.value, 4)
no_outliers_df$variable[k] = names(df_1)[1]
no_outliers_df$no.outliers_ad[k] = round(ad.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$no.outliers_lillie[k] = round(lillie.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$no.outliers_pearson[k] = round(pearson.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$no.outliers_sw[k] = round(shapiro.test(as.vector(df_2[,1])[[1]])$p.value, 4)
no_outliers_df$no.outliers_sf[k] = round(sf.test(as.vector(df_2[,1])[[1]])$p.value, 4)
}
summary_out <- merge(outliers_df, no_outliers_df)
gt(summary_out, rowname_col = "variable") %>%
tab_spanner_delim(
delim = "_"
)
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
outliers_df$variable[k] = names(df_1)[1]
outliers_df$outliers_ad[k] = round(ad.test(as.vector(df_1[,1])[[1]])$p.value, 3)
outliers_df$outliers_lillie[k] = round(lillie.test(as.vector(df_1[,1])[[1]])$p.value, 3)
outliers_df$outliers_pearson[k] = round(pearson.test(as.vector(df_1[,1])[[1]])$p.value, 3)
outliers_df$outliers_sw[k] = round(shapiro.test(as.vector(df_1[,1])[[1]])$p.value, 3)
outliers_df$outliers_sf[k] = round(sf.test(as.vector(df_1[,1])[[1]])$p.value, 3)
no_outliers_df$variable[k] = names(df_1)[1]
no_outliers_df$no.outliers_ad[k] = round(ad.test(as.vector(df_2[,1])[[1]])$p.value, 3)
no_outliers_df$no.outliers_lillie[k] = round(lillie.test(as.vector(df_2[,1])[[1]])$p.value, 3)
no_outliers_df$no.outliers_pearson[k] = round(pearson.test(as.vector(df_2[,1])[[1]])$p.value, 3)
no_outliers_df$no.outliers_sw[k] = round(shapiro.test(as.vector(df_2[,1])[[1]])$p.value, 3)
no_outliers_df$no.outliers_sf[k] = round(sf.test(as.vector(df_2[,1])[[1]])$p.value, 3)
}
summary_out <- merge(outliers_df, no_outliers_df)
gt(summary_out, rowname_col = "variable") %>%
tab_spanner_delim(
delim = "_"
)
descriptive_summary
outliers_summary <- descriptive_summary
outliers_summary
outliers_summary <- total
outliers_summary
outliers_summary <- total
# Resumen descriptivo total
q1 <- new_dataset %>% dplyr::select(attend,
priGPA, termGPA,
ACT, final,
atndrte,
hwrte, stndfnl) %>%
summarise(across(everything(),
~ quantile(.x, na.rm = T, 0.25))) %>% t()
q2 <- new_dataset %>% dplyr::select(attend,
priGPA, termGPA,
ACT, final,
atndrte,
hwrte, stndfnl) %>%
summarise(across(everything(), ~ median(.x, na.rm = TRUE))) %>% t()
q3 <- new_dataset %>% dplyr::select(attend,
priGPA, termGPA,
ACT, final,
atndrte,
hwrte, stndfnl) %>%
summarise(across(everything(), ~ quantile(.x, na.rm = T, 0.75))) %>% t()
outliers_summary <- data.frame(Variable = rownames(q1),
Total = paste0(round(q2, 2), " (",
round(q1, 2), " - ",
round(q3, 2), ")"))
outliers_summary
no.outliers_summary <- outliers_summary
no.outliers_summary
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2
df_2[,2]
q1 = quantile(as.vector(df_2[,1], na.rm = T, 0.25))
q2 = quantile(as.vector(df_2[,1], na.rm = T, 0.5))
q3 = quantile(as.vector(df_2[,1], na.rm = T, 0.75))
k = 1
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
q1 = quantile(as.vector(df_2[,1], na.rm = T, 0.25))
q1 = quantile(as.vector(df_2[,1]), na.rm = T, 0.25)
q2 = quantile(as.vector(df_2[,1]), na.rm = T, 0.5)
q3 = quantile(as.vector(df_2[,1]), na.rm = T, 0.75)
as.vector(df_2[,1])
q1 = quantile(as.vector(df_2[,1])[[1]], na.rm = T, 0.25)
q2 = quantile(as.vector(df_2[,1])[[1]], na.rm = T, 0.5)
q3 = quantile(as.vector(df_2[,1])[[1]], na.rm = T, 0.75)
q1
q2
q3
for (k in 1:8) {
df_1 = df_2 = dataset_continuas[,k]
df_2$z = as.vector(scale(df_1[,1]))
df_2 = df_2 %>% filter(abs(z) <= 2.5)
df_1$group = "outliers"
df_2$group = "no-outliers"
df_2 = df_2[,c(1,3)]
colnames(df_2) = c(colnames(df_1)[1], "group")
q1 = quantile(as.vector(df_2[,1])[[1]], na.rm = T, 0.25)
q2 = quantile(as.vector(df_2[,1])[[1]], na.rm = T, 0.5)
q3 = quantile(as.vector(df_2[,1])[[1]], na.rm = T, 0.75)
no.outliers_summary$Variable[k] = names(df_1)[1]
no.outliers_summary$Total[k] = paste0(round(q2, 2), " (",
round(q1, 2), " - ",
round(q3, 2), ")")
}
no.outliers_summary
colnames(outliers_summary) = c("Variable", "Baseline_Total")
colnames(no.outliers_summary) = c("Variable", "No.Outliers_Total")
whole_summary = merge(outliers_summary,
no.outliers_summary, by = "Variable")
gt(whole_summary, rowname_col = "Variable") %>%
tab_spanner_delim(
delim = "_"
)
colnames(outliers_summary) = c("Variable", "Baseline")
colnames(no.outliers_summary) = c("Variable", "No.Outliers")
whole_summary = merge(outliers_summary,
no.outliers_summary, by = "Variable")
gt(whole_summary, rowname_col = "Variable")
# Sensible a mayúsculas
A1 <- 1
a1 <- 2
A1 + a1
1 + A1
1 + a1
# Vectores
text <- c("x", "y", "z")
text[1] # seleccionar elementos del vector
install.packages("tinytex")
tinytex::install_tinytex()
