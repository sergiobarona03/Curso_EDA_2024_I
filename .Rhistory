file.choose()
getwd()
setwd("C:/Users/PC/Desktop/Curso_EDA_2024_I")
stargazer(count_prop, type = "text", title="Descriptive statistics", digits=1,
out="Módulos/Módulo 2/Categorical1.txt")
count_prop
stargazer(count_prop, type = "html", title="Descriptive statistics", digits=1,
out="Módulos/Módulo 2/Categorical1.html")
# Un resumen de las variables categóricas se puede obtener así
count_prop = new_dataset %>% select(c("Int_attend",
"soph", "frosh")) %>%
mutate(across(.fns = as.character)) %>%
tidyr::pivot_longer(cols = everything()) %>%
count(name, value, name = 'N') %>%
group_by(name) %>%
mutate(N = N,
Mean = prop.table(N) * 100)
stargazer(count_prop, type = "html", title="Descriptive statistics", digits=1,
out="Módulos/Módulo 2/Categorical1.html")
count_prop
count_prop
colnames(count_prop) = c("Statistic", "N", "Mean")
stargazer(count_prop, type = "html", title="Descriptive statistics", digits=1,
out="Módulos/Módulo 2/Categorical1.html")
library(gt)
install.packages("gt")
descriptive_summary = count_prop %>% gt() %>%
gt::tab_header(
title = "How do A and B coincide?",
subtitle = "Such a great table"
)
library(gt)
descriptive_summary = count_prop %>% gt() %>%
gt::tab_header(
title = "How do A and B coincide?",
subtitle = "Such a great table"
)
descriptive_summary
descriptive_summary = count_prop %>% gt()
descriptive_summary = count_prop %>% gt()
descriptive_summary = count_prop %>% gt::gt()
descriptive_summary = gt(as.table(cout_prop))
descriptive_summary = gt(as.table(count_prop))
descriptive_summary = gt(table(count_prop))
descriptive_summary = gt(as.data.frame(count_prop))
count_prop
# Un resumen de las variables categóricas se puede obtener así
count_prop = new_dataset %>% select(c("Int_attend",
"soph", "frosh")) %>%
mutate(across(.fns = as.character)) %>%
tidyr::pivot_longer(cols = everything()) %>%
count(name, value, name = 'N') %>%
group_by(name) %>%
mutate(N = N,
Mean = prop.table(N) * 100)
descriptive_summary = gt(as.data.frame(count_prop))
descriptive_summary
400/3
islands_tbl
islands_tbl <-
tibble(
name = names(islands),
size = islands
) |>
arrange(desc(size)) |>
slice(1:10)
islands_tbl
gt_tbl <-
gt_tbl |>
tab_header(
title = "Large Landmasses of the World",
subtitle = "The top ten largest are presented"
) |>
tab_source_note(
source_note = "Source: The World Almanac and Book of Facts, 1975, page 406."
) |>
tab_source_note(
source_note = md("Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.")
) |>
tab_footnote(
footnote = md("The **largest** by area."),
locations = cells_body(
columns = size, rows = largest
)
) |>
tab_footnote(
footnote = "The lowest by population.",
locations = cells_body(
columns = size, rows = contains("arc")
)
)
gt_tbl <-
islands_tbl |>
gt(rowname_col = "name")
gt_tbl
gt_tbl <-
gt_tbl |>
tab_header(
title = "Large Landmasses of the World",
subtitle = "The top ten largest are presented"
) |>
tab_source_note(
source_note = "Source: The World Almanac and Book of Facts, 1975, page 406."
) |>
tab_source_note(
source_note = md("Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.")
) |>
tab_footnote(
footnote = md("The **largest** by area."),
locations = cells_body(
columns = size, rows = largest
)
) |>
tab_footnote(
footnote = "The lowest by population.",
locations = cells_body(
columns = size, rows = contains("arc")
)
)
gt_tbl <-
gt_tbl |>
tab_header(
title = "Large Landmasses of the World",
subtitle = "The top ten largest are presented"
) |>
tab_source_note(
source_note = "Source: The World Almanac and Book of Facts, 1975, page 406."
) |>
tab_source_note(
source_note = md("Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.")
) |>
tab_footnote(
footnote = md("The **largest** by area."),
locations = cells_body(
columns = size, rows = largest
)
) |>
tab_footnote(
footnote = "The lowest by population.",
locations = cells_body(
columns = size, rows = contains("arc")
)
)
# Create three row groups with the
# `tab_row_group()` function
gt_tbl <-
gt_tbl |>
tab_row_group(
label = "continent",
rows = 1:6
) |>
tab_row_group(
label = "country",
rows = c("Australia", "Greenland")
) |>
tab_row_group(
label = "subregion",
rows = c("New Guinea", "Borneo")
)
# Show the gt table
gt_tbl
# Mejorar la presentación de los resultados
descriptive_summary = gt(as.data.frame(count_prop))
gt
descriptive_summary
# Un resumen de las variables categóricas se puede obtener así
count_prop = new_dataset %>% select(c("Int_attend",
"soph", "frosh")) %>%
mutate(across(.fns = as.character)) %>%
tidyr::pivot_longer(cols = everything()) %>%
count(name, value, name = 'N') %>%
group_by(name) %>%
mutate(N = N,
Mean = prop.table(N) * 100)
# Un resumen de las variables categóricas se puede obtener así
count_prop = new_dataset %>% select(c("Int_attend",
"soph", "frosh")) %>%
mutate(across(.fns = as.character)) %>%
tidyr::pivot_longer(cols = everything()) %>%
count(name, value, name = 'N') %>%
group_by(name) %>%
mutate(N = N,
Share = prop.table(N) * 100)
# Mejorar la presentación de los resultados
descriptive_summary = gt(as.data.frame(count_prop[c("N", "Share")]))
gt_tbl <-
descriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl
# Mejorar la presentación de los resultados
descriptive_summary = gt(as.data.frame(count_prop[c("N", "Share")]))
# Mejorar la presentación de los resultados
descriptive_summary = gt(as.data.frame(count_prop))
gt_tbl <-
descriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl
# Mejorar la presentación de los resultados
descriptive_summary = gt(as.data.frame(count_prop[c("value", "N", "Share")]))
gt_tbl <-
descriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl
# Mejorar la presentación de los resultados
descriptive_summary = gt(as.data.frame(count_prop[c("value", "N", "Share")]))
gt_tbl <-
descriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl <-
descriptive_summary |>
tab_row_group(
label = "Int_attend",
rows = 1:4
) |>
tab_row_group(
label = "Frosh",
rows = 5:6
) |>
tab_row_group(
label = "Soph",
rows = 7:8
)
gt_tbl
View(dataset)
new_dataset
data <- data.frame(
group=LETTERS[1:5],
value=c(13,7,9,21,2)
)
data
count_prop
count_attend
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +  theme_void()
+
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +  theme_void()
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void()
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_text(c("G1", "G2", "G3", "G4"))
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=6)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=1)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=3)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_BW() +
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=3)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_bw() +
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=3)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_bw() +
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=3)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=3)
# Donut chart
ggplot(df, aes(x = 4, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, hsize + 0.5))
# Donut chart
ggplot(count_attend, aes(x = 4, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, hsize + 0.5))
# Donut chart
ggplot(count_attend, aes(x = 4, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, 4 + 0.5))
# Donut chart
ggplot(count_attend, aes(x = " ", y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, 4 + 0.5))
# Donut chart
ggplot(count_attend, aes(x = "", y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, 4 + 0.5))
# Donut chart
ggplot(count_attend, aes(x = 6, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, 4 + 0.5))
# Donut chart
ggplot(count_attend, aes(x = 2, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, 4 + 0.5))
# Donut chart
ggplot(count_attend, aes(x = 3, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, 4 + 0.5))
# Donut chart
ggplot(count_attend, aes(x = 4, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, 4 + 0.5))
# Donut chart
ggplot(count_attend, aes(x = 10, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, 10 + 0.5))
# Donut chart
h_size = 5
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5))
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=3)
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=3)
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=1)
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_text(aes(label = c("G1", "G2", "G3", "G4")),
color = "white", size=10)
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_label(aes(label = n),
position = position_stack(vjust = 0.1),
show.legend = FALSE)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
# Donut chart
h_size = 8
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
# Donut chart
h_size = 5
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
# Pie chart
ggplot(count_attend, aes(x="", y=n, fill=Int_attend)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) + theme_void() +
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
ggplot(count_attend, aes(x = h_size, y = n, fill = Int_attend)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, h_size + 0.5)) + theme_void()+
geom_label(aes(label = n),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
library(treemapify)
ggplot(count_attend, aes(area = n,
fill = n, label = Int_attend)) +
geom_treemap() +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
# Treemap
ggplot(count_attend, aes(area = n,
fill = n, label = Int_attend)) +
geom_treemap() +
geom_treemap_text(colour = "white",
place = "centre",
size = 15) + theme_classic()
# Treemap
ggplot(count_attend, aes(area = n,
fill = n, label = Int_attend)) +
geom_treemap() +
geom_treemap_text(colour = "white",
place = "centre",
size = 15) + scale_fill_viridis_c()
