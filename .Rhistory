# Analizar la normalidad para una variable
library(car)
dataset <- readxl::read_excel("Datos/Formatos/geih_dataset.xlsx")
#----------------------#
# Cargar base de datos #-------------------------------------------------------------------------------------------------------------------------
#----------------------#
setwd("C:/Users/PC/Desktop/Curso_EDA_2024_I")
dataset <- readxl::read_excel("Datos/Formatos/geih_dataset.xlsx")
qqPlot(dataset$ingreso/1000, main = "Ingreso laboral (miles $)", ylab  = " ")
qqPlot(dataset$edad, main = "Edad (años)", ylab = " ")
qqPlot(dataset$horas_semana, main = "Horas trabajadas (semana)", ylab = " ")
qqPlot(dataset$t_actual, main = "Tiempo en el trabajo actual", ylab = " ")
qqPlot(dataset$t_viaje, main = "Tiempo de desplazamiento", ylab = " ")
par(mfrow = c(2,3))
qqPlot(dataset$ingreso/1000, main = "Ingreso laboral (miles $)", ylab  = " ")
qqPlot(dataset$edad, main = "Edad (años)", ylab = " ")
qqPlot(dataset$horas_semana, main = "Horas trabajadas (semana)", ylab = " ")
qqPlot(dataset$t_actual, main = "Tiempo en el trabajo actual", ylab = " ")
qqPlot(dataset$t_viaje, main = "Tiempo de desplazamiento", ylab = " ")
# Analizar la normalidad de las variables continuas
library(nortest) # Anderson-Darling, Kolmogorov-Smirnov (Lilliefors)
############################## Paréntesis: esto es únicamente para la presentación ######################################
nortest_function <- function(x, y){
if (is.function(y)) {
w <- x[!is.na(x)]
return(y(w)$p.value)
} else {return("Y no es una función")}
}
ad.test(dataset$ingreso)
lillie.test(dataset$ingreso)
pearson.test(dataset$ingreso)
sf.test(dataset$ingreso)
shapiro.test(dataset$ingreso)
qqPlot(dataset$ingreso, ylab = "pri GPA", main  = "Base")
qqPlot(log(dataset$ingreso), ylab = "pri GPA", main = "Log transformation ")
par(mfrow = c(2,2))
qqPlot(dataset$ingreso, ylab = "Ingreso laboral", main  = "Base")
qqPlot(log(dataset$ingreso), ylab = "Ingreso laboral", main = "Log transformation ")
qqPlot(log(dataset$ingreso), ylab = "Ingreso laboral", main = "Square root transformation ")
qqPlot(log(dataset$ingreso), ylab = "Ingreso laboral", main = "Cubic root transformation ")
par(mfrow = c(2,2))
qqPlot(dataset$ingreso, ylab = "Ingreso laboral", main  = "Base")
qqPlot(log(dataset$ingreso), ylab = "Ingreso laboral", main = "Log transformation ")
qqPlot((dataset$ingreso)^(1/2), ylab = "Ingreso laboral", main = "Square root transformation ")
qqPlot(log(dataset$ingreso)^(1/3), ylab = "Ingreso laboral", main = "Cubic root transformation ")
qqPlot((dataset$ingreso)^(1/3), ylab = "Ingreso laboral", main = "Cubic root transformation ")
par(mfrow = c(2,2))
qqPlot(dataset$ingreso, ylab = "Ingreso laboral", main  = "Base")
qqPlot(log(dataset$ingreso), ylab = "Ingreso laboral", main = "Log transformation ")
qqPlot((dataset$ingreso)^(1/2), ylab = "Ingreso laboral", main = "Square root transformation ")
qqPlot((dataset$ingreso)^(1/3), ylab = "Ingreso laboral", main = "Cubic root transformation ")
# Se debería conservar la transformación logarítmica
dataset$logingreso <- log(dataset$ingreso)
par(mfrow = c(2,2))
qqPlot(dataset$edad, ylab = "Edad (años)", main  = "Base")
qqPlot(log(dataset$edad), ylab = "Edad (años)", main = "Log transformation ")
qqPlot((dataset$edad)^(1/2), ylab = "Edad (años)", main = "Square root transformation ")
qqPlot((dataset$edad)^(1/3), ylab = "Edad (años)", main = "Cubic root transformation ")
par(mfrow = c(2,2))
qqPlot(dataset$horas_semana, ylab = "Horas de trabajo (semana)", main  = "Base")
qqPlot(log(dataset$horas_semana), ylab = "Horas de trabajo (semana)", main = "Log transformation ")
qqPlot((dataset$horas_semana)^(1/2), ylab = "Horas de trabajo (semana)", main = "Square root transformation ")
qqPlot((dataset$horas_semana)^(1/3), ylab = "Horas de trabajo (semana)", main = "Cubic root transformation ")
par(mfrow = c(2,2))
qqPlot(dataset$t_actual, ylab = "Tiempo de trabajo (actual)", main  = "Base")
qqPlot(log(dataset$t_actual), ylab = "Tiempo de trabajo (actual)", main = "Log transformation ")
dataset$t_actual > 0
par(mfrow = c(2,2))
qqPlot(dataset$t_viaje, ylab = "Tiempo de desplazamiento", main  = "Base")
qqPlot(log(dataset$t_viaje), ylab = "Tiempo de desplazamiento", main = "Log transformation ")
qqPlot((dataset$t_viaje)^(1/2), ylab = "Tiempo de desplazamiento", main = "Square root transformation ")
qqPlot((dataset$t_viaje)^(1/3), ylab = "Tiempo de desplazamiento", main = "Cubic root transformation ")
shapiro.test(dataset$logingreso)
par(mfrow = c(2,1))
boxplot(dataset$ingreso, horizontal=TRUE)
boxplot(log(dataset$ingreso), horizontal=TRUE)
par(mfrow = c(2,1))
boxplot(dataset$ingreso, horizontal=F)
boxplot(log(dataset$ingreso), horizontal=F)
windows()
par(mfrow = c(1,2))
boxplot(dataset$ingreso, horizontal=F)
boxplot(log(dataset$ingreso), horizontal=F)
windows()
par(mfrow = c(1,2))
boxplot(dataset$ingreso, horizontal=F, main = "Base")
boxplot(log(dataset$ingreso), horizontal=F, main = "Log transformation")
windows()
par(mfrow = c(1,2))
boxplot(dataset$t_actual, horizontal=F, main = "Base")
boxplot(log(dataset$t_actual), horizontal=F, main = "Log transformation")
# Se mantiene la transformación logarítimica
dataset$logt_viaje <- log(dataset$t_viaje)
shapiro.test(dataset$logt_viaje)
kurtosis(dataset$logt_viaje)
library(moments)
kurtosis(dataset$logt_viaje)
logt_viaje
dataset$logt_viaje
dataset$t_viaje
kurtosis(dataset$logt_viaje, na.rm = T)
skewness(dataset$logt_viaje, na.rm = T)
shapiro.test(dataset$logt_viaje)
# Definición de función Q2(Q1 - Q3)
quantile_f <- function(x){
q1 <- quantile(x, na.rm = T, 0.25)
q2 <- quantile(x, na.rm = T, 0.5)
q3 <- quantile(x, na.rm = T, 0.75)
y <- paste0(round(as.numeric(q2), 1), " (",
round(as.numeric(q1), 2), " - ",
round(as.numeric(q3), 2), ")")
return(y)
}
dataset$ingreso2 = dataset$ingreso/1000
# Definición de función Q2(Q1 - Q3)
quantile_f <- function(x){
q1 <- quantile(x, na.rm = T, 0.25)
q2 <- quantile(x, na.rm = T, 0.5)
q3 <- quantile(x, na.rm = T, 0.75)
y <- paste0(round(as.numeric(q2), 1), " (",
round(as.numeric(q1), 2), " - ",
round(as.numeric(q3), 2), ")")
return(y)
}
total <- dataset %>% dplyr::select(ingreso2,
edad, horas_semana,
t_actual, t_viaje) %>%
summarise(across(everything(),
~ quantile_f(.x)))
LIBR
library(tidyverse)
dataset$ingreso2 = dataset$ingreso/1000
# Definición de función Q2(Q1 - Q3)
quantile_f <- function(x){
q1 <- quantile(x, na.rm = T, 0.25)
q2 <- quantile(x, na.rm = T, 0.5)
q3 <- quantile(x, na.rm = T, 0.75)
y <- paste0(round(as.numeric(q2), 1), " (",
round(as.numeric(q1), 2), " - ",
round(as.numeric(q3), 2), ")")
return(y)
}
total <- dataset %>% dplyr::select(ingreso2,
edad, horas_semana,
t_actual, t_viaje) %>%
summarise(across(everything(),
~ quantile_f(.x)))
q_group <- dataset %>%
group_by(area) %>%
summarise(across(c("ingreso2",
"edad", "horas_semana",
"t_actual", "t_viaje"),
list(sum = quantile_f))) %>% as.data.frame()
q_group
par(mfrow = c(2,3))
qqPlot(dataset$ingreso/1000, main = "Ingreso laboral (miles $)", ylab  = " ")
qqPlot(dataset$edad, main = "Edad (años)", ylab = " ")
qqPlot(dataset$horas_semana, main = "Horas trabajadas (semana)", ylab = " ")
qqPlot(dataset$t_actual, main = "Tiempo en el trabajo actual", ylab = " ")
qqPlot(dataset$t_viaje, main = "Tiempo de desplazamiento", ylab = " ")
par(mfrow = c(2,2))
qqPlot(dataset$ingreso, ylab = "Ingreso laboral", main  = "Base")
qqPlot(log(dataset$ingreso), ylab = "Ingreso laboral", main = "Log transformation ")
qqPlot((dataset$ingreso)^(1/2), ylab = "Ingreso laboral", main = "Square root transformation ")
qqPlot((dataset$ingreso)^(1/3), ylab = "Ingreso laboral", main = "Cubic root transformation ")
par(mfrow = c(2,2))
qqPlot(dataset$t_viaje, ylab = "Tiempo de desplazamiento", main  = "Base")
qqPlot(log(dataset$t_viaje), ylab = "Tiempo de desplazamiento", main = "Log transformation ")
qqPlot((dataset$t_viaje)^(1/2), ylab = "Tiempo de desplazamiento", main = "Square root transformation ")
qqPlot((dataset$t_viaje)^(1/3), ylab = "Tiempo de desplazamiento", main = "Cubic root transformation ")
edu_area <- dataset %>% count(edu, area) %>%
group_by(area) %>% mutate(perc = (n/sum(n))*100)
edu_area
vis_miss(dataset)
library(naniar)
#---------------------------------------#
# Valores faltantes: ingresos laborales #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------#
install.packages("naniar")
library(naniar)
vis_miss(dataset)
library(UpSetR)
gg_miss_upset(dataset)
gg_miss_var(dataset,
facet = area)
gg_miss_var
help(gg_miss_var)
gg_miss_upset(dataset)
gg_miss_var(dataset[c("ingreso", "t_viaje", "fondo")],
facet = area, show_pct = T)
gg_miss_var(dataset[c("ingreso", "t_viaje", "fondo", "area")],
facet = area, show_pct = T)
vis_miss(dataset)
gg_miss_var(dataset[c("ingreso", "t_viaje", "fondo", "area")],
facet = area, show_pct = T)
gg_miss_fct(x = dataset, fct = area)
setwd("C:/Users/PC/Desktop/Curso_EDA_2024_I")
dataset <- readxl::read_excel("Datos/Formatos/geih_dataset.xlsx")
vis_miss(dataset)
gg_miss_upset(dataset)
gg_miss_fct(x = dataset, fct = area)
knitr::opts_chunk$set(echo = FALSE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
paste0("\n \\", "tiny","\n\n", x, "\n\n \\normalsize")
})
library(car)
par(mfrow = c(2,3))
qqPlot(dataset$ingreso/1000, main = "Ingreso laboral (miles $)", ylab  = " ")
qqPlot(dataset$edad, main = "Edad (años)", ylab = " ")
qqPlot(dataset$horas_semana, main = "Horas trabajadas (semana)", ylab = " ")
qqPlot(dataset$t_actual, main = "Tiempo en el trabajo actual", ylab = " ")
qqPlot(dataset$t_viaje, main = "Tiempo de desplazamiento", ylab = " ")
# Analizar la normalidad de las variables continuas
library(nortest) # Anderson-Darling, Kolmogorov-Smirnov (Lilliefors)
############################## Paréntesis: esto es únicamente para la presentación ######################################
nortest_function <- function(x, y){
if (is.function(y)) {
w <- x[!is.na(x)]
return(y(w)$p.value)
} else {return("Y no es una función")}
}
ad <- dataset %>% dplyr::select(ingreso,
edad, horas_semana,
t_actual, t_viaje) %>%
summarise(across(c("ingreso",
"edad", "horas_semana",
"t_actual", "t_viaje"),
~ nortest_function(.x, ad.test))) %>% t()
li <- dataset %>% dplyr::select(ingreso,
edad, horas_semana,
t_actual, t_viaje) %>%
summarise(across(c("ingreso",
"edad", "horas_semana",
"t_actual", "t_viaje"),
~ nortest_function(.x, lillie.test))) %>% t()
pearson <- dataset %>% dplyr::select(ingreso,
edad, horas_semana,
t_actual, t_viaje) %>%
summarise(across(c("ingreso",
"edad", "horas_semana",
"t_actual", "t_viaje"),
~ nortest_function(.x, pearson.test))) %>% t()
df_summary <- data.frame(variable = rownames(ad),
ad_test = round(ad, 6),
li_test = round(li,6),
pearson_test = round(pearson, 6))
kable(df_summary, col.names = c("variable",
"Anderson-Darling",
"Lilliefors (Kolmogorov-Smirnov)",
"Pearson chi-square"), row.names = F,
format = "latex", booktabs = T)
df_summary <- data.frame(variable = rownames(ad),
ad_test = round(ad, 6),
li_test = round(li,6),
pearson_test = round(pearson, 6))
gt(df_summary)
df_summary
library(car)
par(mfrow = c(2,2))
qqPlot(dataset$ingreso, ylab = "Ingreso laboral", main  = "Base")
qqPlot(log(dataset$ingreso), ylab = "Ingreso laboral", main = "Log transformation ")
qqPlot((dataset$ingreso)^(1/2), ylab = "Ingreso laboral", main = "Square root transformation ")
qqPlot((dataset$ingreso)^(1/3), ylab = "Ingreso laboral", main = "Cubic root transformation ")
quantile_f <- function(x){
q1 <- quantile(x, na.rm = T, 0.25)
q2 <- quantile(x, na.rm = T, 0.5)
q3 <- quantile(x, na.rm = T, 0.75)
y <- paste0(round(as.numeric(q2), 1), " (",
round(as.numeric(q1), 2), " - ",
round(as.numeric(q3), 2), ")")
return(y)
}
total <- dataset %>% dplyr::select(ingreso,
edad, horas_semana,
t_actual, t_viaje) %>%
dplyr::summarise(across(everything(),
~ quantile_f(.x)))
q_total <- data.frame(area = "Total",
ingreso_sum = total$ingreso,
edad_sum = total$edad,
horas_semana_sum = total$horas_semana,
t_actual_sum = total$t_actual,
t_viaje_sum = total$t_viaje)
# Resumen descriptivo por grupos
q_group <- dataset %>%
dplyr::group_by(area) %>%
dplyr::summarise(across(c("ingreso",
"edad", "horas_semana",
"t_actual", "t_viaje"),
list(sum = quantile_f))) %>% as.data.frame()
cont_summary <- rbind(q_total, q_group)
cont_summary
ggplot(dataset,
aes(x = factor(edu),
fill = factor(edu))) +
geom_bar(
aes(y = after_stat(count / ave(count, PANEL, FUN = sum)*100)),
position = "dodge"
) +
labs(x = "Nivel de educación máxima", y = "Proporción (%)") +
ggtitle("Nivel de educación según área metropolitana") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank()) +
facet_wrap(~area, ncol = 5) +  labs(fill = "Nivel")
ggplot(dataset,
aes(x = factor(edu),
fill = factor(edu))) +
geom_bar(
aes(y = after_stat(count / ave(count, PANEL, FUN = sum)*100)),
position = "dodge"
) +
labs(x = "Nivel de educación máxima", y = "Proporción (%)") +
ggtitle("Nivel de educación según área metropolitana") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank(),
axis.ticks = element_blank()) +
facet_wrap(~area, ncol = 5) +  labs(fill = "Nivel")
con1<-table(dataset$area,dataset$edu)
addmargins(con1)
con1 <- table(dataset$area,dataset$edu)
con2 <- addmargins(con1)
chisq.test(dataset$area, dataset$edu)
library(car)
par(mfrow = c(2,2))
qqPlot(dataset$ingreso, ylab = "Ingreso laboral", main  = "Base")
qqPlot(log(dataset$ingreso), ylab = "Ingreso laboral", main = "Log transformation ")
qqPlot((dataset$ingreso)^(1/2), ylab = "Ingreso laboral", main = "Square root transformation ")
qqPlot((dataset$ingreso)^(1/3), ylab = "Ingreso laboral", main = "Cubic root transformation ")
