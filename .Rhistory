scale_color_brewer(palette = "Reds")
# Gráfico en ggplot2 con facetas
# Incorporamos el plan de pensiones como una faceta
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() + facet_wrap(~cotiza_fondo, scale = "free_y") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr")
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones"
)
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() +
geom_smooth(method = "lm", color = "black") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones"
)
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() +
geom_smooth(method = "lm", color = "black") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr") # Reds
# Gráfico en ggplot2 con facetas
# Incorporamos el plan de pensiones como una faceta
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() +
geom_smooth(method = "lm", color = "black") + facet_wrap(~cotiza_fondo, scale = "free_y") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr")
# Ajustar el color
library(RColorBrewer) # Examinar paletas de colores
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr") # Reds
# Agregar el ajuste lineal: geom_smooth()
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() +
geom_smooth(method = "lm", color = "black") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr")
# Gráfico en ggplot2 con facetas
# Incorporamos el plan de pensiones como una faceta
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() +
facet_wrap(~cotiza_fondo, scale = "free_y") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr")
file.choose()
dataset$actividad
file.choose()
# Recuperar datos sobre el hogar y la vivienda
test <- read.csv("Datos\\GEIH\\CSV\\Datos del hogar y la vivienda.CSV")
test
# Recuperar datos sobre el hogar y la vivienda
test <- read.csv("Datos\\GEIH\\CSV\\Datos del hogar y la vivienda.CSV",
sep = ";")
test
# Como primer paso, importamos la base de datos
# Definir directorio de trabajo
file.choose()
# Importar formato .xlsx
dataset <- readxl::read_excel("Datos/Formatos/geih_dataset.xlsx")
# Recuperar datos sobre el hogar y la vivienda
test <- read.csv("Datos\\GEIH\\CSV\\Características generales, seguridad social en salud y educación.CSV",
sep = ";")
test$id <- paste0(test$directorio,"-",
test$secuencia_p,"-",
test$orden)
test$id
test$id <- paste0(test$DIRECTORIO,"-",
test$SECUENCIA_P,"-",
test$ORDEN)
test
dataset$rama_2
file.choose()
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("\\Datos\\CIIU_REV_4.xls")
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
test
View(test)
dataset$rama_2
dataset$rama_4
# Mantener la división
test <- test %>% select(División, Descripción)
View(test)
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(is.numeric(División) | !is.na(División))
View(test)
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
test <- test %>% select(División, Descripción)
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(!is.na(División) & is.numeric(División) | !is.na(División))
View(test)
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
test <- test %>% select(División, Descripción)
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(!is.na(División) & is.numeric(División))
View(test)
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
test <- test %>% select(División, Descripción)
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(is.numeric(División))
View(test)
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
test <- test %>% select(División, Descripción)
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(!is.na(as.numeric(Division)))
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(!is.na(as.numeric(DivisiÓn)))
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(!is.na(as.numeric(División)))
View(test)
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(!is.na(as.numeric(División)))
# Nos centramos en las personas que cotizan
new_dataset2 <- new_dataset %>% filter(ingreso > 2000000 &
ingreso < 10000000 &
cotiza_fondo != "No cotiza")
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
test <- test %>% select(División, Descripción)
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(!is.na(as.numeric(División)))
View(test)
test$División <- as.numeric(test$División)
test2 <- left_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- right_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- inner_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- full_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- left_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- right_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- inner_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- full_join(dataset,
test, by = c("rama_2" = "División"))
dataset$rama_2
View(test2)
test2 <- left_join(dataset,
test, by = c("rama_2" = "División"))
View(test2)
dataset[12,]
dataset[12,]$rama_2
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
View(test)
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
test <- test %>% select(División, Descripción)
count(test, División)
count(test, División, order = T)
View(count(test, División))
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
test <- test %>% select(División, Descripción)
# Recuperar datos sobre el hogar y la vivienda
test <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
test <- test %>% select(División, Descripción)
# Mantener los valores numéricos y distintos de NA
test <- test %>%
filter(!is.na(as.numeric(División)))
test$División <- as.numeric(test$División)
test2 <- left_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- right_join(dataset,
test, by = c("rama_2" = "División"))
View(test2)
test2 <- inner_join(dataset,
test, by = c("rama_2" = "División"))
test2 <- full_join(dataset,
test, by = c("rama_2" = "División"))
# Recuperar datos sobre el hogar y la vivienda
ciiu <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
ciiu <- ciiu %>% select(División, Descripción)
# Mantener los valores numéricos y distintos de NA
ciiu <- ciiu %>%
filter(!is.na(as.numeric(División)))
ciiu$División <- as.numeric(ciiu$División)
dataset_ciiu <- left_join(dataset,
ciiu, by = c("rama_2" = "División"))
dataset_ciiu <- right_join(dataset,
ciiu, by = c("rama_2" = "División"))
dataset_ciiu <- inner_join(dataset,
ciiu, by = c("rama_2" = "División"))
dataset_ciiu <- full_join(dataset,
ciiu, by = c("rama_2" = "División"))
# Se puede seguir la sintaxis %>%
# Agregar definitivamente a la base de datos
dataset <- dataset %>% left_join(ciiu, by = c("rama_2", "División"))
ciiu$División
# Se puede seguir la sintaxis %>%
# Agregar definitivamente a la base de datos
dataset <- dataset %>% left_join(ciiu, by = c("rama_2" = "División"))
View(dataset)
# Renombrar la variable como "Actividad"
dataset <- dataset %>% rename(Actividad = Descripción)
View(dataset)
# Para el ejemplo, eliminemos la descripción de la actividad económica:
dataset <- dataset %>% select(-actividad)
# Para el ejemplo, eliminemos la descripción de la actividad económica:
dataset <- dataset %>% select(-Actividad)
# Recuperar datos sobre el hogar y la vivienda
ciiu <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
# Mantener la división
ciiu <- ciiu %>% select(División, Descripción)
# Mantener los valores numéricos y distintos de NA
ciiu <- ciiu %>%
filter(!is.na(as.numeric(División)))
ciiu$División <- as.numeric(ciiu$División)
dataset_ciiu <- left_join(dataset,
ciiu, by = c("rama_2" = "División"))
dataset_ciiu <- right_join(dataset,
ciiu, by = c("rama_2" = "División"))
dataset_ciiu <- inner_join(dataset,
ciiu, by = c("rama_2" = "División"))
dataset_ciiu <- full_join(dataset,
ciiu, by = c("rama_2" = "División"))
# Se puede seguir la sintaxis %>%
# Agregar definitivamente a la base de datos
dataset <- dataset %>% left_join(ciiu, by = c("rama_2" = "División"))
# Renombrar la variable como "Actividad"
dataset <- dataset %>% rename(Actividad = Descripción)
View(dataset)
# Nos centramos en las personas que cotizan
new_dataset2 <- new_dataset %>% filter(ingreso > 2000000 &
ingreso < 10000000 &
cotiza_fondo != "No cotiza")
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso,
color = cotiza_fondo))+
geom_point()
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones"
)
# Agregar etiquetas y definir límites
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones"
)
# Ajustar el color
library(RColorBrewer) # Examinar paletas de colores
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr") # Reds
# Agregar el ajuste lineal: geom_smooth()
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() +
geom_smooth(method = "lm", color = "black") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr")
# Gráfico en ggplot2 con facetas
# Incorporamos el plan de pensiones como una faceta
ggplot2::ggplot(new_dataset2, aes(x = edad,
y = ingreso/1000,
color = cotiza_fondo))+
geom_point() +
facet_wrap(~cotiza_fondo, scale = "free_y") + labs(
title = "Ingreso laboral y edad diferenciado según plan de pensiones",
caption = "Fuente: Gran Encuesta Integrada de Hogares - diciembre 2023",
x = "Edad (años cumplidos)",
y = "Ingreso laboral (miles $)",
col = "Plan de pensiones") +
scale_color_brewer(palette = "PuOr")
# Declarar variable como factor
new_dataset$edu = factor(new_dataset$edu)
# fct_relevel()
# Reordenar manualmente los niveles de un factor
# Organiza los niveles después del 4to
fct_relevel(new_dataset$edu, c("Primaria", "Secundaria"),
after = 4)
# fct_reorder()
# Reordenar factor variable ordenando según otra variable
ggplot2::ggplot(dataset_final, aes(x = cotiza_fondo,
y = edad, fill = cotiza_fondo)) +
geom_boxplot() + scale_fill_brewer(palette = "PuOr") # Gráfico no ordenado
# Declarar variable como factor
new_dataset$edu = factor(new_dataset$edu)
# fct_relevel()
# Reordenar manualmente los niveles de un factor
# Organiza los niveles después del 4to
fct_relevel(new_dataset$edu, c("Primaria", "Secundaria"),
after = 4)
# fct_infreq()
# Reordenar los valores de acuerdo con su frecuencia
fct_infreq(new_dataset$edu)
# fct_shift()
# Reordenar moviendo los niveles de izquierda a derecha
fct_shift(new_dataset$edu)
# fct_recode()
# Recodificar manualmente los niveles de las variables categóricas
fct_recode(new_dataset$edu,
`Maestria` = "Maestría")
# fct_collapse()
# Agrupar distintos niveles en un grupo específico
fct_collapse(new_dataset$edu,
`Posgrado` = c("Maestría", "Doctorado"))
# fct_lump_prop()
# Agrupar niveles en categoría "Otros" de acuerdo con una proporción
fct_lump_prop(new_dataset$edu,
prop = 0.10, other_level = "Other")
fct_lump_prop(new_dataset$edu,
prop = 0.04, other_level = "Other")
fct_lump_n(new_dataset$edu,
n = 2, other_level = "Other")
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(cotiza_fondo, edad),
y = edad,
fill = cotiza_fondo)) +
geom_boxplot() + scale_fill_brewer(palette = "PuOr") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) # Gráfico ordenado
# fct_reorder()
# Reordenar factor variable ordenando según otra variable
ggplot2::ggplot(new_dataset, aes(x = cotiza_fondo,
y = edad, fill = cotiza_fondo)) +
geom_boxplot() + scale_fill_brewer(palette = "PuOr") # Gráfico no ordenado
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(cotiza_fondo, edad),
y = edad,
fill = cotiza_fondo)) +
geom_boxplot() + scale_fill_brewer(palette = "PuOr") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) # Gráfico ordenado
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() + scale_fill_brewer(palette = "PuOr") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() + scale_fill_brewer(palette = "red") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(new_dataset)
ggplot2::ggplot(new_dataset, aes(x = area,
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
new_dataset$area
ggplot2::ggplot(new_dataset, aes(x = area,
y = ingreso,
fill = area)) +
geom_boxplot()
test_na <- new_dataset %>% filter(is.na(ingreso))
test_na
ggplot2::ggplot(new_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Eliminar NAs
na_dataset <- new_dataset %>% filter(!is.na(ingreso))
ggplot2::ggplot(na_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot2::ggplot(na_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylim(0, 50000)
ggplot2::ggplot(na_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylim(0, 500000)
ggplot2::ggplot(na_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggplot2::ggplot(na_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
=
ggplot2::ggplot(na_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
500000
5000000
ggplot2::ggplot(na_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlim(0, 5000000)
ggplot2::ggplot(na_dataset, aes(x = fct_reorder(area, ingreso),
y = ingreso,
fill = area)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylim(0, 5000000)
# Para el ejemplo, eliminemos la descripción de la actividad económica:
dataset <- dataset %>% select(-actividad)
# Recuperar datos sobre el hogar y la vivienda
ciiu <- readxl::read_excel("Datos\\CIIU_REV_4.xls")
rlang::last_trace()
?left_join
setwd("C:/Users/PC/Desktop/Curso_EDA_2024_I/Módulos/Módulo 2")
setwd("C:/Users/PC/Desktop/Curso_EDA_2024_I")
